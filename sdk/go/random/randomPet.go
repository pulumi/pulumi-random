// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `random_pet` generates random pet names that are intended to be
// used as unique identifiers for other resources.
// 
// This resource can be used in conjunction with resources that have
// the `create_before_destroy` lifecycle flag set, to avoid conflicts with
// unique names during the brief period where both the old and new resources
// exist concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/pet.html.markdown.
type RandomPet struct {
	s *pulumi.ResourceState
}

// NewRandomPet registers a new resource with the given unique name, arguments, and options.
func NewRandomPet(ctx *pulumi.Context,
	name string, args *RandomPetArgs, opts ...pulumi.ResourceOpt) (*RandomPet, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["keepers"] = nil
		inputs["length"] = nil
		inputs["prefix"] = nil
		inputs["separator"] = nil
	} else {
		inputs["keepers"] = args.Keepers
		inputs["length"] = args.Length
		inputs["prefix"] = args.Prefix
		inputs["separator"] = args.Separator
	}
	s, err := ctx.RegisterResource("random:index/randomPet:RandomPet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomPet{s: s}, nil
}

// GetRandomPet gets an existing RandomPet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomPet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RandomPetState, opts ...pulumi.ResourceOpt) (*RandomPet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["keepers"] = state.Keepers
		inputs["length"] = state.Length
		inputs["prefix"] = state.Prefix
		inputs["separator"] = state.Separator
	}
	s, err := ctx.ReadResource("random:index/randomPet:RandomPet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomPet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RandomPet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RandomPet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Arbitrary map of values that, when changed, will
// trigger a new id to be generated. See
// the main provider documentation for more information.
func (r *RandomPet) Keepers() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["keepers"])
}

// The length (in words) of the pet name.
func (r *RandomPet) Length() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["length"])
}

// A string to prefix the name with.
func (r *RandomPet) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

// The character to separate words in the pet name.
func (r *RandomPet) Separator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["separator"])
}

// Input properties used for looking up and filtering RandomPet resources.
type RandomPetState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The length (in words) of the pet name.
	Length interface{}
	// A string to prefix the name with.
	Prefix interface{}
	// The character to separate words in the pet name.
	Separator interface{}
}

// The set of arguments for constructing a RandomPet resource.
type RandomPetArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The length (in words) of the pet name.
	Length interface{}
	// A string to prefix the name with.
	Prefix interface{}
	// The character to separate words in the pet name.
	Separator interface{}
}
