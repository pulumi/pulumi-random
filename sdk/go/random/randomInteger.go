// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `random_integer` generates random values from a given range, described by the `min` and `max` attributes of a given resource.
// 
// This resource can be used in conjunction with resources that have
// the `create_before_destroy` lifecycle flag set, to avoid conflicts with
// unique names during the brief period where both the old and new resources
// exist concurrently.
type RandomInteger struct {
	s *pulumi.ResourceState
}

// NewRandomInteger registers a new resource with the given unique name, arguments, and options.
func NewRandomInteger(ctx *pulumi.Context,
	name string, args *RandomIntegerArgs, opts ...pulumi.ResourceOpt) (*RandomInteger, error) {
	if args == nil || args.Max == nil {
		return nil, errors.New("missing required argument 'Max'")
	}
	if args == nil || args.Min == nil {
		return nil, errors.New("missing required argument 'Min'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["keepers"] = nil
		inputs["max"] = nil
		inputs["min"] = nil
		inputs["seed"] = nil
	} else {
		inputs["keepers"] = args.Keepers
		inputs["max"] = args.Max
		inputs["min"] = args.Min
		inputs["seed"] = args.Seed
	}
	inputs["result"] = nil
	s, err := ctx.RegisterResource("random:index/randomInteger:RandomInteger", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomInteger{s: s}, nil
}

// GetRandomInteger gets an existing RandomInteger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomInteger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RandomIntegerState, opts ...pulumi.ResourceOpt) (*RandomInteger, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["keepers"] = state.Keepers
		inputs["max"] = state.Max
		inputs["min"] = state.Min
		inputs["result"] = state.Result
		inputs["seed"] = state.Seed
	}
	s, err := ctx.ReadResource("random:index/randomInteger:RandomInteger", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomInteger{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RandomInteger) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RandomInteger) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Arbitrary map of values that, when changed, will
// trigger a new id to be generated. See
// the main provider documentation for more information.
func (r *RandomInteger) Keepers() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["keepers"])
}

// The maximum inclusive value of the range.
func (r *RandomInteger) Max() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["max"])
}

// The minimum inclusive value of the range.
func (r *RandomInteger) Min() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["min"])
}

// (int) The random Integer result.
func (r *RandomInteger) Result() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["result"])
}

// A custom seed to always produce the same value.
func (r *RandomInteger) Seed() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["seed"])
}

// Input properties used for looking up and filtering RandomInteger resources.
type RandomIntegerState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The maximum inclusive value of the range.
	Max interface{}
	// The minimum inclusive value of the range.
	Min interface{}
	// (int) The random Integer result.
	Result interface{}
	// A custom seed to always produce the same value.
	Seed interface{}
}

// The set of arguments for constructing a RandomInteger resource.
type RandomIntegerArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The maximum inclusive value of the range.
	Max interface{}
	// The minimum inclusive value of the range.
	Min interface{}
	// A custom seed to always produce the same value.
	Seed interface{}
}
