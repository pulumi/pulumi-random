// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `random_id` generates random numbers that are intended to be
// used as unique identifiers for other resources.
// 
// This resource *does* use a cryptographic random number generator in order
// to minimize the chance of collisions, making the results of this resource
// when a 16-byte identifier is requested of equivalent uniqueness to a
// type-4 UUID.
// 
// This resource can be used in conjunction with resources that have
// the `create_before_destroy` lifecycle flag set to avoid conflicts with
// unique names during the brief period where both the old and new resources
// exist concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/id.html.markdown.
type RandomId struct {
	s *pulumi.ResourceState
}

// NewRandomId registers a new resource with the given unique name, arguments, and options.
func NewRandomId(ctx *pulumi.Context,
	name string, args *RandomIdArgs, opts ...pulumi.ResourceOpt) (*RandomId, error) {
	if args == nil || args.ByteLength == nil {
		return nil, errors.New("missing required argument 'ByteLength'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["byteLength"] = nil
		inputs["keepers"] = nil
		inputs["prefix"] = nil
	} else {
		inputs["byteLength"] = args.ByteLength
		inputs["keepers"] = args.Keepers
		inputs["prefix"] = args.Prefix
	}
	inputs["b64"] = nil
	inputs["b64Std"] = nil
	inputs["b64Url"] = nil
	inputs["dec"] = nil
	inputs["hex"] = nil
	s, err := ctx.RegisterResource("random:index/randomId:RandomId", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomId{s: s}, nil
}

// GetRandomId gets an existing RandomId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomId(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RandomIdState, opts ...pulumi.ResourceOpt) (*RandomId, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["b64"] = state.B64
		inputs["b64Std"] = state.B64Std
		inputs["b64Url"] = state.B64Url
		inputs["byteLength"] = state.ByteLength
		inputs["dec"] = state.Dec
		inputs["hex"] = state.Hex
		inputs["keepers"] = state.Keepers
		inputs["prefix"] = state.Prefix
	}
	s, err := ctx.ReadResource("random:index/randomId:RandomId", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomId{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RandomId) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RandomId) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *RandomId) B64() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["b64"])
}

// The generated id presented in base64 without additional transformations.
func (r *RandomId) B64Std() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["b64Std"])
}

// The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
func (r *RandomId) B64Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["b64Url"])
}

// The number of random bytes to produce. The
// minimum value is 1, which produces eight bits of randomness.
func (r *RandomId) ByteLength() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["byteLength"])
}

// The generated id presented in non-padded decimal digits.
func (r *RandomId) Dec() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dec"])
}

// The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
func (r *RandomId) Hex() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hex"])
}

// Arbitrary map of values that, when changed, will
// trigger a new id to be generated. See
// the main provider documentation for more information.
func (r *RandomId) Keepers() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["keepers"])
}

// Arbitrary string to prefix the output value with. This
// string is supplied as-is, meaning it is not guaranteed to be URL-safe or
// base64 encoded.
func (r *RandomId) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

// Input properties used for looking up and filtering RandomId resources.
type RandomIdState struct {
	B64 interface{}
	// The generated id presented in base64 without additional transformations.
	B64Std interface{}
	// The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
	B64Url interface{}
	// The number of random bytes to produce. The
	// minimum value is 1, which produces eight bits of randomness.
	ByteLength interface{}
	// The generated id presented in non-padded decimal digits.
	Dec interface{}
	// The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
	Hex interface{}
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// Arbitrary string to prefix the output value with. This
	// string is supplied as-is, meaning it is not guaranteed to be URL-safe or
	// base64 encoded.
	Prefix interface{}
}

// The set of arguments for constructing a RandomId resource.
type RandomIdArgs struct {
	// The number of random bytes to produce. The
	// minimum value is 1, which produces eight bits of randomness.
	ByteLength interface{}
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// Arbitrary string to prefix the output value with. This
	// string is supplied as-is, meaning it is not guaranteed to be URL-safe or
	// base64 encoded.
	Prefix interface{}
}
