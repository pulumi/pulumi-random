// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package random

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The resource `random_string` generates a random permutation of alphanumeric
// characters and optionally special characters.
// 
// This resource *does* use a cryptographic random number generator.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/string.html.markdown.
type RandomString struct {
	s *pulumi.ResourceState
}

// NewRandomString registers a new resource with the given unique name, arguments, and options.
func NewRandomString(ctx *pulumi.Context,
	name string, args *RandomStringArgs, opts ...pulumi.ResourceOpt) (*RandomString, error) {
	if args == nil || args.Length == nil {
		return nil, errors.New("missing required argument 'Length'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["keepers"] = nil
		inputs["length"] = nil
		inputs["lower"] = nil
		inputs["minLower"] = nil
		inputs["minNumeric"] = nil
		inputs["minSpecial"] = nil
		inputs["minUpper"] = nil
		inputs["number"] = nil
		inputs["overrideSpecial"] = nil
		inputs["special"] = nil
		inputs["upper"] = nil
	} else {
		inputs["keepers"] = args.Keepers
		inputs["length"] = args.Length
		inputs["lower"] = args.Lower
		inputs["minLower"] = args.MinLower
		inputs["minNumeric"] = args.MinNumeric
		inputs["minSpecial"] = args.MinSpecial
		inputs["minUpper"] = args.MinUpper
		inputs["number"] = args.Number
		inputs["overrideSpecial"] = args.OverrideSpecial
		inputs["special"] = args.Special
		inputs["upper"] = args.Upper
	}
	inputs["result"] = nil
	s, err := ctx.RegisterResource("random:index/randomString:RandomString", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomString{s: s}, nil
}

// GetRandomString gets an existing RandomString resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomString(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RandomStringState, opts ...pulumi.ResourceOpt) (*RandomString, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["keepers"] = state.Keepers
		inputs["length"] = state.Length
		inputs["lower"] = state.Lower
		inputs["minLower"] = state.MinLower
		inputs["minNumeric"] = state.MinNumeric
		inputs["minSpecial"] = state.MinSpecial
		inputs["minUpper"] = state.MinUpper
		inputs["number"] = state.Number
		inputs["overrideSpecial"] = state.OverrideSpecial
		inputs["result"] = state.Result
		inputs["special"] = state.Special
		inputs["upper"] = state.Upper
	}
	s, err := ctx.ReadResource("random:index/randomString:RandomString", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RandomString{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RandomString) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RandomString) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Arbitrary map of values that, when changed, will
// trigger a new id to be generated. See
// the main provider documentation for more information.
func (r *RandomString) Keepers() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["keepers"])
}

// The length of the string desired
func (r *RandomString) Length() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["length"])
}

// (default true) Include lowercase alphabet characters
// in random string.
func (r *RandomString) Lower() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["lower"])
}

// (default 0) Minimum number of lowercase alphabet
// characters in random string.
func (r *RandomString) MinLower() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minLower"])
}

// (default 0) Minimum number of numeric characters
// in random string.
func (r *RandomString) MinNumeric() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minNumeric"])
}

// (default 0) Minimum number of special characters
// in random string.
func (r *RandomString) MinSpecial() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minSpecial"])
}

// (default 0) Minimum number of uppercase alphabet
// characters in random string.
func (r *RandomString) MinUpper() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minUpper"])
}

// (default true) Include numeric characters in random
// string.
func (r *RandomString) Number() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["number"])
}

// Supply your own list of special characters to
// use for string generation.  This overrides characters list in the special
// argument.  The special argument must still be set to true for any overwritten
// characters to be used in generation.
func (r *RandomString) OverrideSpecial() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["overrideSpecial"])
}

// Random string generated.
func (r *RandomString) Result() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["result"])
}

// (default true) Include special characters in random
// string. These are '!@#$%&*()-_=+[]{}<>:?'
func (r *RandomString) Special() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["special"])
}

// (default true) Include uppercase alphabet characters
// in random string.
func (r *RandomString) Upper() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["upper"])
}

// Input properties used for looking up and filtering RandomString resources.
type RandomStringState struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The length of the string desired
	Length interface{}
	// (default true) Include lowercase alphabet characters
	// in random string.
	Lower interface{}
	// (default 0) Minimum number of lowercase alphabet
	// characters in random string.
	MinLower interface{}
	// (default 0) Minimum number of numeric characters
	// in random string.
	MinNumeric interface{}
	// (default 0) Minimum number of special characters
	// in random string.
	MinSpecial interface{}
	// (default 0) Minimum number of uppercase alphabet
	// characters in random string.
	MinUpper interface{}
	// (default true) Include numeric characters in random
	// string.
	Number interface{}
	// Supply your own list of special characters to
	// use for string generation.  This overrides characters list in the special
	// argument.  The special argument must still be set to true for any overwritten
	// characters to be used in generation.
	OverrideSpecial interface{}
	// Random string generated.
	Result interface{}
	// (default true) Include special characters in random
	// string. These are '!@#$%&*()-_=+[]{}<>:?'
	Special interface{}
	// (default true) Include uppercase alphabet characters
	// in random string.
	Upper interface{}
}

// The set of arguments for constructing a RandomString resource.
type RandomStringArgs struct {
	// Arbitrary map of values that, when changed, will
	// trigger a new id to be generated. See
	// the main provider documentation for more information.
	Keepers interface{}
	// The length of the string desired
	Length interface{}
	// (default true) Include lowercase alphabet characters
	// in random string.
	Lower interface{}
	// (default 0) Minimum number of lowercase alphabet
	// characters in random string.
	MinLower interface{}
	// (default 0) Minimum number of numeric characters
	// in random string.
	MinNumeric interface{}
	// (default 0) Minimum number of special characters
	// in random string.
	MinSpecial interface{}
	// (default 0) Minimum number of uppercase alphabet
	// characters in random string.
	MinUpper interface{}
	// (default true) Include numeric characters in random
	// string.
	Number interface{}
	// Supply your own list of special characters to
	// use for string generation.  This overrides characters list in the special
	// argument.  The special argument must still be set to true for any overwritten
	// characters to be used in generation.
	OverrideSpecial interface{}
	// (default true) Include special characters in random
	// string. These are '!@#$%&*()-_=+[]{}<>:?'
	Special interface{}
	// (default true) Include uppercase alphabet characters
	// in random string.
	Upper interface{}
}
