// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The resource `random.RandomString` generates a random permutation of alphanumeric characters and optionally special characters.
 *
 * This resource *does* use a cryptographic random number generator.
 *
 * Historically this resource's intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use random_id, for sensitive random values please use random_password.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as random from "@pulumi/random";
 *
 * const randomRandomString = new random.RandomString("random", {
 *     length: 16,
 *     overrideSpecial: "/@Â£$",
 *     special: true,
 * });
 * ```
 *
 * ## Import
 *
 * # Strings can be imported by just specifying the value of the string
 *
 * ```sh
 *  $ pulumi import random:index/randomString:RandomString test test
 * ```
 */
export class RandomString extends pulumi.CustomResource {
    /**
     * Get an existing RandomString resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RandomStringState, opts?: pulumi.CustomResourceOptions): RandomString {
        return new RandomString(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'random:index/randomString:RandomString';

    /**
     * Returns true if the given object is an instance of RandomString.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RandomString {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RandomString.__pulumiType;
    }

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The length of the string desired.
     */
    public readonly length!: pulumi.Output<number>;
    /**
     * Include lowercase alphabet characters in the result.
     */
    public readonly lower!: pulumi.Output<boolean | undefined>;
    /**
     * Minimum number of lowercase alphabet characters in the result.
     */
    public readonly minLower!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of numeric characters in the result.
     */
    public readonly minNumeric!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of special characters in the result.
     */
    public readonly minSpecial!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of uppercase alphabet characters in the result.
     */
    public readonly minUpper!: pulumi.Output<number | undefined>;
    /**
     * Include numeric characters in the result.
     */
    public readonly number!: pulumi.Output<boolean | undefined>;
    /**
     * Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
     */
    public readonly overrideSpecial!: pulumi.Output<string | undefined>;
    /**
     * The generated random string.
     */
    public /*out*/ readonly result!: pulumi.Output<string>;
    /**
     * Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`
     */
    public readonly special!: pulumi.Output<boolean | undefined>;
    /**
     * Include uppercase alphabet characters in the result.
     */
    public readonly upper!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RandomString resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RandomStringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RandomStringArgs | RandomStringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RandomStringState | undefined;
            inputs["keepers"] = state ? state.keepers : undefined;
            inputs["length"] = state ? state.length : undefined;
            inputs["lower"] = state ? state.lower : undefined;
            inputs["minLower"] = state ? state.minLower : undefined;
            inputs["minNumeric"] = state ? state.minNumeric : undefined;
            inputs["minSpecial"] = state ? state.minSpecial : undefined;
            inputs["minUpper"] = state ? state.minUpper : undefined;
            inputs["number"] = state ? state.number : undefined;
            inputs["overrideSpecial"] = state ? state.overrideSpecial : undefined;
            inputs["result"] = state ? state.result : undefined;
            inputs["special"] = state ? state.special : undefined;
            inputs["upper"] = state ? state.upper : undefined;
        } else {
            const args = argsOrState as RandomStringArgs | undefined;
            if ((!args || args.length === undefined) && !opts.urn) {
                throw new Error("Missing required property 'length'");
            }
            inputs["keepers"] = args ? args.keepers : undefined;
            inputs["length"] = args ? args.length : undefined;
            inputs["lower"] = args ? args.lower : undefined;
            inputs["minLower"] = args ? args.minLower : undefined;
            inputs["minNumeric"] = args ? args.minNumeric : undefined;
            inputs["minSpecial"] = args ? args.minSpecial : undefined;
            inputs["minUpper"] = args ? args.minUpper : undefined;
            inputs["number"] = args ? args.number : undefined;
            inputs["overrideSpecial"] = args ? args.overrideSpecial : undefined;
            inputs["special"] = args ? args.special : undefined;
            inputs["upper"] = args ? args.upper : undefined;
            inputs["result"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RandomString.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RandomString resources.
 */
export interface RandomStringState {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * The length of the string desired.
     */
    length?: pulumi.Input<number>;
    /**
     * Include lowercase alphabet characters in the result.
     */
    lower?: pulumi.Input<boolean>;
    /**
     * Minimum number of lowercase alphabet characters in the result.
     */
    minLower?: pulumi.Input<number>;
    /**
     * Minimum number of numeric characters in the result.
     */
    minNumeric?: pulumi.Input<number>;
    /**
     * Minimum number of special characters in the result.
     */
    minSpecial?: pulumi.Input<number>;
    /**
     * Minimum number of uppercase alphabet characters in the result.
     */
    minUpper?: pulumi.Input<number>;
    /**
     * Include numeric characters in the result.
     */
    number?: pulumi.Input<boolean>;
    /**
     * Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
     */
    overrideSpecial?: pulumi.Input<string>;
    /**
     * The generated random string.
     */
    result?: pulumi.Input<string>;
    /**
     * Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`
     */
    special?: pulumi.Input<boolean>;
    /**
     * Include uppercase alphabet characters in the result.
     */
    upper?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RandomString resource.
 */
export interface RandomStringArgs {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    keepers?: pulumi.Input<{[key: string]: any}>;
    /**
     * The length of the string desired.
     */
    length: pulumi.Input<number>;
    /**
     * Include lowercase alphabet characters in the result.
     */
    lower?: pulumi.Input<boolean>;
    /**
     * Minimum number of lowercase alphabet characters in the result.
     */
    minLower?: pulumi.Input<number>;
    /**
     * Minimum number of numeric characters in the result.
     */
    minNumeric?: pulumi.Input<number>;
    /**
     * Minimum number of special characters in the result.
     */
    minSpecial?: pulumi.Input<number>;
    /**
     * Minimum number of uppercase alphabet characters in the result.
     */
    minUpper?: pulumi.Input<number>;
    /**
     * Include numeric characters in the result.
     */
    number?: pulumi.Input<boolean>;
    /**
     * Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
     */
    overrideSpecial?: pulumi.Input<string>;
    /**
     * Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`
     */
    special?: pulumi.Input<boolean>;
    /**
     * Include uppercase alphabet characters in the result.
     */
    upper?: pulumi.Input<boolean>;
}
