// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The resource `random.RandomBytes` generates random bytes that are intended to be used as a secret, or key. Use this in preference to `random.RandomId` when the output is considered sensitive, and should not be displayed in the CLI.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const jwtSecretRandomBytes = new random.RandomBytes("jwtSecretRandomBytes", {length: 64});
 * const jwtSecretSecret = new azure.keyvault.Secret("jwtSecretSecret", {
 *     keyVaultId: "some-azure-key-vault-id",
 *     value: jwtSecretRandomBytes.base64,
 * });
 * ```
 *
 * ## Import
 *
 * Random bytes can be imported by specifying the value as base64 string.
 *
 * ```sh
 *  $ pulumi import random:index/randomBytes:RandomBytes basic "8/fu3q+2DcgSJ19i0jZ5Cw=="
 * ```
 */
export class RandomBytes extends pulumi.CustomResource {
    /**
     * Get an existing RandomBytes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RandomBytesState, opts?: pulumi.CustomResourceOptions): RandomBytes {
        return new RandomBytes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'random:index/randomBytes:RandomBytes';

    /**
     * Returns true if the given object is an instance of RandomBytes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RandomBytes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RandomBytes.__pulumiType;
    }

    /**
     * The generated bytes presented in base64 string format.
     */
    public /*out*/ readonly base64!: pulumi.Output<string>;
    /**
     * The generated bytes presented in hex string format.
     */
    public /*out*/ readonly hex!: pulumi.Output<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The number of bytes requested. The minimum value for length is 1.
     */
    public readonly length!: pulumi.Output<number>;

    /**
     * Create a RandomBytes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RandomBytesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RandomBytesArgs | RandomBytesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RandomBytesState | undefined;
            resourceInputs["base64"] = state ? state.base64 : undefined;
            resourceInputs["hex"] = state ? state.hex : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
        } else {
            const args = argsOrState as RandomBytesArgs | undefined;
            if ((!args || args.length === undefined) && !opts.urn) {
                throw new Error("Missing required property 'length'");
            }
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["base64"] = undefined /*out*/;
            resourceInputs["hex"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["base64", "hex"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RandomBytes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RandomBytes resources.
 */
export interface RandomBytesState {
    /**
     * The generated bytes presented in base64 string format.
     */
    base64?: pulumi.Input<string>;
    /**
     * The generated bytes presented in hex string format.
     */
    hex?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of bytes requested. The minimum value for length is 1.
     */
    length?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RandomBytes resource.
 */
export interface RandomBytesArgs {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of bytes requested. The minimum value for length is 1.
     */
    length: pulumi.Input<number>;
}
